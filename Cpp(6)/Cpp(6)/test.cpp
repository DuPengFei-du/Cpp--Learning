#include<iostream>
using namespace std;
int main()
{
	int a, b;
	cin >> a >> b;
	int c;
	c = a + b;
	cout << c << endl;
	return 0;
}


#include<iostream>
using namespace std;
int Add(int x, int y)
{
	return x + y;
}
int main()
{
	int a, b;
	cin >> a >> b;
	int c;
	c = Add(a, b);
	cout << c << endl;
	return 0;
}


#include<iostream>
using namespace std;
int MAX(int x, int y)
{
	return x > y ? x : y;
}
int main()
{
	int a, b;
	cin >> a >> b;
	int c = MAX(a, b);
	cout << c << endl;
	return 0;
}


//C++对C功能的拓展
//允许使用以//开头的注释
//
//对变量的定义可以出现在程序中的任何行(但必须在引用该变量之前)
//
//提供了标准输入输出流对象cin和cout，他们不用指定输入输出的格式(如% d)，使得输入输出更加的方便
//
//可以用const定义常变量
//
//可以利用函数重载实现用同一函数名代表功能类似的函数，以方便使用，提高可读性
//
//可以利用函数模板，简化同一类函数的编程工作
//
//可以使用带默认值的参数的函数，是函数的调用更加的灵活
//
//提供变量的引用类型，即为变量提供一个别名，将引用作为函数的形参，可以实现通过函数的调用来改变实参变量的值
//
//增加了内联函数，用来提高程序的效率
//
//增加了单目的作用域运算符，这样在局部变量作用域内也能引用全局变量
//
//可以用string类定义字符串变量，使得对字符串的运算更加方便
//
//用new和delete运算符替代malloc和free函数，使得分配动态空间更加的方便


/*
从根本上说，计算机只能识别由0和1组成的二进制指令，而不能识别和执行高级语言写的指令
为了使计算机能执行高级语言源程序，必须先用一种称为编译器的软件把源程序翻译成二进制的目标程序
编译时以原程序文件为单位分别编译的，每一个程序单位组成一个源文件程序，如果有多个程序单位，系统就
分别把他们你的编译成多个目标程序。目标程序一般以.obj作为后缀
编译的作用就是对源程序进行语法检查和词法检查
在改正所有的错误之后，也就是全部通过编译之后，得到一个或多个目标文件
此时要用系统提供的链接程序，将一个和层序的所有目标程序和系统库问及那以及系统提供的其他信息连接起来
最终形成一个可执行程序.exe,其是可以直接执行的
*/


//面向对象的程序设计方法概述
/*
对于规模比较小的程序，编程者可以直接写出一个面向过程的程序，详细的描述每一瞬时的数据结构
以及其操作的过程。但是当程序规模比较打的时候，就会显得有些力不从心了
C++就是为了解决编写大程序过程中的困难而产生的
*/

//什么是面向对象的程序设计
/*
面向对象的程序设计的思路和人们日常生活中处理问题的思路是相似的，在自然世界和社会生活中，一个复杂的事物
总是由很多个部分组成的。比如说，一辆汽车是由很多个部件组成的。一套房子是由很多个部分组成的，一个学校
是由很多个部门组成的
当人们在生产汽车的时候，并不是先设计制造发动机，在设计和制造底盘，而是去分别制造，最后在组装起来，各部分
之间有一定的联系，以方便协调工作
这就是面向对象的基本思路
*/


/*
在C++中，每个对象都是由数据和函数(即操作代码)这两部分组成的,数据体现了属性，函数是
用来对数据进行操作的，从而实现某些功能
*/


//封装与信息隐蔽
/*
可以对一个对象进行封装处理，把他的一部分属性和功能对外界屏蔽
也就是说从外界是看不到的，甚至是不可知的
这样做的好处在于降低了人们操作对象的复杂程度，使用对象的人完全可以不必知道对象的内部具体细节
只需要了解其外部功能就可以自如的操作对象
*/


/*
面向对象程序设计方法的一个重要特点就是封装性，所谓的封装指的是两方面的含义
一是将有关的数和操作代码封装在一个对象中，形成一个基本单位
各个对象之间相互独立，互不干扰。二是将对象中某些部分对外隐蔽，也就是说隐蔽他的内部细节
只留下少数的接口，以便与外界进行联系，接收外界的消息
*/


