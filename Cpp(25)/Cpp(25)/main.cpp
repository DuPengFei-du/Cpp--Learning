//常对象成员

/*
可以将对象的成员声明为const，包括常数据成员和常成员函数

长数据成员：
它的作用和用法和一般的变量相类似，用关键字const来声明常数据成员
常数据成员的值是不可以被修改的，有一点需要注意:只能通过构造函数的参数初始化表
对常数据成员进行初始化，任何其他的函数都不能对常数据成员赋值

如果在类体中定义了长数据成员hour
const int hour;
那么，就不能在构造函数中对常数据成员赋初值的方法，下面的用法是非法的：
Time::Time(int h)
{
hour = h ;
因为，常数据成员是不可以被赋值的

如果在类外定义构造函数，应该写成下面这个形式
Time::Time(int h):hour(h)
{
}
常对象的数据成员都是常数据成员，因此在定义常对象时
构造函数只能使用参数初始化表对常数据成员进行初始化的操作
*/


//常成员函数
/*
前面已经提到了，一般的成员函数可以引用本类中的非const数据成员
也可以修改他们。如果将成员函数声明位常成员函数，则只能引用本类中的
数据成员，而不能修改他们，例如只用于输出数据等
*/
//void get_time() const;
//声明常成员函数的一般格式为：
//类型名 函数名(参数表) const   注意：const 放在最后面


/*
const是函数类型的一部分，在声明函数和定义函数的时候都要有const关键字
在调用的时候不用加上const，常成员函数可以引用const数据成员，也可以
引用非const数据成员
const数据成员可以被const成员函数引用，也可以被非const成员函数引用
*/


//怎样利用常成员函数呢？

/*
如果在一个类中，有些数据成员的值允许被修改，有些数据成员的值不允许被修改
那么可以将一部分数据成员声明为const，从而保证他们的值可与不发生变化
可以用非const成员函数引用这些值，并修改非const成员的值

如果要求所有的数据都不允许被修改，那么可以将所有的数据成员全部声明为const
或者将对象声明为const(常对象)，然后用const成员函数引用数据成员
这样就起到了双保险作用

不要误认为常对象中的成员函数就都是常成员函数
常对象只保证其数据成员是常数据成员
他们的值是不可以被修改的
如果在常对象中的数据成员函数前面没有加const，编译系统就会把其
当作非const的
*/

//
//#include<iostream>
//
////命名空间不是类型，是一个作用域
////C语言中有全局作用域和局部作用域
////定义命名空间相当于是定义了一个新的作用域
//namespace N1
//{
//	//可以定义变量，也可以定义函数
//	int a = 1;
//	int b = 2;
//	int Add(int left, int right)
//	{
//		return left + right;
//	}
//}
//
//int a = 20;  //那么如果我想要打印全局作用域中的a的话，我要怎么打印？
////printf("%d\n", ::a); 
//
//int main()
//{
//	int a = 30;
//	printf("%d\n", a);  //在这个时候调用printf函数打印的肯定是主函数中的a
//	printf("%d\n", ::a);  //::为作用域限定符，如果在一个变量前面
//	//加上了::就代表我现在访问的是全局作用域中的变量
//	printf("%d\n", N1::a);
//	//访问命名空间的a，只需要在作用域限定符的前面加上命名空间的名称就可以了
//	return 0;
//}
////三个a分别属于三个不同的作用域，所以编译起来是不会有任何问题的
////那么，在什么情况下会是有问题的？
////就是在同一个命名空间中有两个相同的变量的时候，这个时候是有问题的


//namespace N2
//{
//	int a = 10;
//	int b = 20;
//	int c = 30;
//	int Sub(int left, int right)
//	{
//		return left - right;
//	}
//	//命名空间还可以嵌套
//	namespace N3
//	{
//		int a = 10;
//		int b = 20;
//		int Mul(int left, int right)
//		{
//			return left * right;
//		}
//	}
//}
//printf("%d\n", N2::N3::a);  //在主函数中进行调用


//namespace N1   //前面已经有过N1
////如果命名空间的名字有重复的话，是否可以通过编译？
////答案是可以通过编译的
////如果存在相同名称的命名空间，编译器会把他们合并成一个
//{
//	int c = 30;
//	int d = 40;
//	int Div(int left, int right)
//	{
//		return left / right;   //保证right要不为0
//	}
//}


//using N::b;  //相当于是全局变量，如果这个时候再定义一个int b; 那么就会出错了
//int main()
//{
//	printf("%d\n", N::a);
//	printf("%d\n", b);
//}
////优点是使用方便，缺陷是容易引起冲突(上述所示，int b);
////如果冲突了，也很好解决，再变量的前面八命名空间的名称再加上就可以了。


//using namespace N;
//int main()
//{
//	printf("%d\n", N::a);
//	printf("%d\n", b);
//	Add(10, 20);
//	return 0;
//}
////使用方便，但是冲突就会多


//#include<iostream>
//using namespace std;
//int main()
//{
//	//C语言中是不会对printf函数进行语法检测的
//	//printf("%d %d %d", 10);    //编译器是不会报错的
//	//这是完全可以通过编译的，只是会有警告
//	//警告来自于后两个参数是未知的
//	//使用printf还有一个不太好的点就是
//	//要输出什么类型的数据，这个格式控制符一定要给对，而且需要我们自己来给出
//	//要记住很多种格式，很容易出错
//	//所以再C++中我们使用cout
//	cout << "change world" << endl;
//	cout << 10 << " " << 12.34 << " " << 'a' << endl;
//	//不用在乎所输出的东西的类型是什么
//	return 0;
//}


//void Test(int a = 10)   //跟的是一个默认值，好处就是主函数里面不用传参了
////如果用户再调用函数的同时进行了传参操作，那么使用的就是用户所传进去的参数
//{
//	cout << a << endl;
//}
//int main()
//{
//	Test();
//	Test(100);
//	return 0;
//}


////缺省参数的分类
////全缺省参数和半缺省参数
//void TestFunc(int a = 1, int b = 2, int c = 3)
//{
//	//所有参数都有缺省值称为全缺省参数
//	cout << a << ' ' << b << ' ' << c << ' ' << endl;
//}
//
////半缺省参数
////void TestFunc2(int a=1,int b=2,int c)   
////无法通过编译，把b的值拿掉，也无法通过编译
////只有把a的值拿掉，才能通过编译
////a和b都拿掉，有c也是可以的
////得出规律，注意：半缺省参数只能从右往左一次给出
//void TestFunc2(int a, int b, int c = 3)  //可以通过编译
//{
//	//部分参数带有缺省值
//	cout << a << ' ' << b << ' ' << c << ' ' << endl;
//}
//int main()
//{
//	//全缺省
//	TestFunc();  //打印 1 2 3
//	TestFunc(10);  //打印 10 2 3 
//	TestFunc(10, 20);  //打印10 20 3
//	TestFunc(10, 20, 30);  //打印10 20 30
//
//	//半缺省
//	TestFunc2(10, 20);
//	TestFunc2(10, 20, 30);
//
//	return 0;
//}


//void TestFunc(int a = 20);
//
//void TestFunc(int a = 20)
//{
//
//}
////这样子的代码就会出错，原因在于如果两个位置同时来给的话，可能会给的不一样
////可能就会说不清了，给在声明的位置会比较好一些，因为有时候需要用到第三方库，要给出函数声明才能使用，而且如果定义的参数的初值不一样，编译器就会混乱；缺省参数值只能是常量或全局变量
//int main()
//{
//	return 0;
//}


//int Add(int left, int right)
//{
//	return left + right;
//}
//
//double Add(double left, double right)
//{
//	return left + right;
//}
////参数列表不一样
////称其为函数重载
////调用的时候，调用那种的，就用哪种的
////编译器在编译的时候要进行参数类型的推演，他要确定你所传的参数到底是什么类型的
//int main()
//{
//	Add(1, 2);
//	Add(1.2, 3.4);  //编译是可以通过编译的，但是计算的值是不对的
//	//c语言是不允许重名的函数的
//	return 0;
//}


//void TestFunc()
//{
//
//}
//
//void TestFunc(int a)
//{
//
//}
////上面两个函数形成了重载
//int main()
//{
//	return 0;
//}
//
//void TestFunc(double a)
//{
//
//}
//
//void TestFunc(int a)
//{
//
//}
////上面两个函数形成了重载
//int main()
//{
//	return 0;
//}
//
//void TestFunc(double a, int b)
//{
//
//}
//
//void TestFunc(int a, double b)
//{
//
//}
////上面两个函数形成了重载
//int main()
//{
//	return 0;
//}


//void TestFunc()
//{}
//void TestFunc(int a = 0)
//{}
//int main()
//{
//	TestFunc(10);  //是可以通过编译的，会调用下面的哪个参数
//	TestFunc();    //是不会通过编译的
//	//对重载函数的调用不明确，第一个可以调用，第二个也可以调用
//	return 0;
//}
