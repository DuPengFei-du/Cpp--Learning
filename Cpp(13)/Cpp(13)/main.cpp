//类的封装性和信息隐蔽

/*
C++通过类来实现封装性，把数据和与这些数据有关的操作封装在一个类中，或者说
类的作用是把数据和算法封装在用户声明的抽象数据类型中
在面向对象程序设计语言中，在声明类时，一般都是把所有的数据指定为私有的，使得
他们与外界是隔离的，把需要让外界调用的成员函数声明为共有的
在类外虽然不能直接访问私有数据成员，但可以通过调用公用成员来引用甚至修改私有成员
*/

//外界与对象唯一的联系渠道就是调用公用的成员函数，这样就使得类与外界的联减少到最低限度
//公用成员函数就是用户使用的类公用接口，或者说是类的对外接口

/*
通过成员函数对数据成员进行操作称为类功能的实现，为了防止用户任意修改公用
成员函数，改变对数据进行的操作，往往不让用户看到公用成员函数的源代码，显然
更不能去修改它，用户只能接触到公用成员函数的目标代码
*/


/*
由此可以看到，类中被操作的数据是私有的，类的功能的实现细节对用户是隐蔽的
这种实现称为私有实现
这种类的公用接口与私有实现的分离形成了信息隐蔽
用户接触到的是公用的接口，而不能接触被隐蔽的数据成员
*/


//软件工程的一个最基本的原则就是将接口与现实分离
//信息隐蔽是软件工程中一个非常重要的概念


//类声明和成员函数定义的分离

/*
在面向对象的程序开发中，往往把类的声明(其中包含成员函数的声明)放在指定
的头文件中，用户如果想要使用这个类，只需要把有关的头文件包含进来就可以了
不必再程序中重复书写类的声明，以减少工作量，节省篇幅，提高编程的效率
*/

/*
由于在头文件中包含了类的声明，因此在用户的程序中就可以直接使用该类名来定义对象
由于在类体中包含了对成员函数原型的声明，在程序中就可以调用这些对象的公用成员函数
*/


//#include<iostream>
//
////命名空间不是类型，是一个作用域
////C语言中有全局作用域和局部作用域
////定义命名空间相当于是定义了一个新的作用域
//namespace N1
//{
//	//可以定义变量，也可以定义函数
//	int a = 1;
//	int b = 2;
//	int Add(int left, int right)
//	{
//		return left + right;
//	}
//}
//
//int a = 20;  //那么如果我想要打印全局作用域中的a的话，我要怎么打印？
////printf("%d\n", ::a); 
//
//int main()
//{
//	int a = 30;
//	printf("%d\n", a);  //在这个时候调用printf函数打印的肯定是主函数中的a
//	printf("%d\n", ::a);  //::为作用域限定符，如果在一个变量前面
//	//加上了::就代表我现在访问的是全局作用域中的变量
//	printf("%d\n", N1::a);
//	//访问命名空间的a，只需要在作用域限定符的前面加上命名空间的名称就可以了
//	return 0;
//}
////三个a分别属于三个不同的作用域，所以编译起来是不会有任何问题的
////那么，在什么情况下会是有问题的？
////就是在同一个命名空间中有两个相同的变量的时候，这个时候是有问题的


//namespace N2
//{
//	int a = 10;
//	int b = 20;
//	int c = 30;
//	int Sub(int left, int right)
//	{
//		return left - right;
//	}
//	//命名空间还可以嵌套
//	namespace N3
//	{
//		int a = 10;
//		int b = 20;
//		int Mul(int left, int right)
//		{
//			return left * right;
//		}
//	}
//}
//printf("%d\n", N2::N3::a);  //在主函数中进行调用


//using namespace N;
//int main()
//{
//	printf("%d\n", N::a);
//	printf("%d\n", b);
//	Add(10, 20);
//	return 0;
//}
////使用方便，但是冲突就会多


//#include <iostream>
//using namespace std;
//int main()
//{
//	int a;
//	double b;
//	char c;
//	cin >> a;
//	cin >> b >> c;
//	cout << a << endl;
//	cout << b << " " << c << endl;
//	return 0;
//}


////缺省参数的分类
////全缺省参数和半缺省参数
//void TestFunc(int a = 1, int b = 2, int c = 3)
//{
//	//所有参数都有缺省值称为全缺省参数
//	cout << a << ' ' << b << ' ' << c << ' ' << endl;
//}
//
////半缺省参数
////void TestFunc2(int a=1,int b=2,int c)   
////无法通过编译，把b的值拿掉，也无法通过编译
////只有把a的值拿掉，才能通过编译
////a和b都拿掉，有c也是可以的
////得出规律，注意：半缺省参数只能从右往左一次给出
//void TestFunc2(int a, int b, int c = 3)  //可以通过编译
//{
//	//部分参数带有缺省值
//	cout << a << ' ' << b << ' ' << c << ' ' << endl;
//}
//int main()
//{
//	//全缺省
//	TestFunc();  //打印 1 2 3
//	TestFunc(10);  //打印 10 2 3 
//	TestFunc(10, 20);  //打印10 20 3
//	TestFunc(10, 20, 30);  //打印10 20 30
//
//	//半缺省
//	TestFunc2(10, 20);
//	TestFunc2(10, 20, 30);
//
//	return 0;
//}


//#include<iostream >
//using namespace std;
//
//void Swap(int a, int b)
//{
//	cout << &a << " " << &b << " " << endl;
//	int temp = a;
//	a = b;
//	b = temp;
//	//交换的是形参的内容，不是实参的内容
//}
//
//void Swap(int* pa, int* pb)
//{
//	cout << &pa << " " << &pb << " " << endl;
//	int temp = *pa;
//	*pa = *pb;
//	*pb = temp;
//}
//
////两个swap形成了重载
//int main()
//{
//	int a = 1;
//	int b = 2;
//	cout << &a << " " << &b << " " << endl;
//	//Swap(a, b);  //如果只是值传递的话，是不行的
//	Swap(&a, &b);
//	cout << a << " " << b << " " << endl;
//}


//int main()
//{
//	int a = 10;
//	//int& ra;  //这样是无法通过编译的，因为引用类型的变量没有进行初始化操作
//	//这样是不行的
//	int& ra = a;
//	//ra是a的别名，也就是说，ra和a是同一个东西
//	//如何看出ra和a是一个东西，打印他们的地址，就可以了
//	cout << &ra << " " << &a << " " << endl;
//	//所打印的地址是一样的
//	//那么，我们给ra进行赋值的话，a的值也会发生改变
//	ra = 20;
//	cout << a << endl;  //打印的a的值也为20
//	return 0;
//}


//int main()
//{
//	int a = 10;
//	long& ra = a;
//	return 0;
//	这样子的代码是不能通过编译的，虽然说，long和int之间可以进行
//	隐式的类型转换，但是在引用这一方面来说，是不能引用的
//}


//int main()
//{
//	int a = 10;
//	int& ra = a;  //ra是a的别名
//	cout << &ra << "=" << &a << endl;
//	ra = 20;  //改变了ra的同时，那么a的值也是会发生改变的
//
//	int& rb = a;  //rb也在引用a ，一个变量可以有多个引用
//	rb = 30;  //那么修改rb的同时，ra和a也都发生了改变
//
//	int& rra = ra;
//	rra = 40;   //那么都会发生改变
//	//因为用的都是同一块空间
//
//	cout << a << " " << ra << " " << rb << " " << rra << " " << endl;
//
//	return 0;
//}


//int main()
//{
//	int a = 10;
//	int& ra = a;
//	int b = 20;
//	ra = b;  //不是引用的操作，而是再进行赋值的操作
//	//不能再让rb去引用其他的变量了
//	return 0;
//}


//#include<iostream>
//using namespace std;
//int main()
//{
//	const int a = 10;   //在C语言中，const所修饰的量其实还是一个变量，只是这个变量不能被修改
//	//但是，在C++中，const所修饰的量，就已经是一个常量了，不能被修改
//	//同时具有宏常量的属性
//	//如何知道在C++中，const所修饰的量是常量，就用数组去检测，如下所示：
//	//int array[a];  //看是否可以通过编译
//
//
//	//int& ra = a;  //ra的值是可以修改的
//	//此时，是无法通过编译的，因为a是const类型的
//	//而ra是普通类型的
//	//那么，如何修改，才能让代码通过编译呢？
//	//只需要在前面加上const 就可以了
//	const int& ra = a;  //称为const类型的引用，或者常引用
//
//	double d = 12.34;
//	const int& rd = d;  //(居然可以通过编译？？)  不加const是不能通过编译的 
//	cout << &rd << " " << &d << " " << endl;
//	//但是打印的地址是不一样的，说明rd引用的就不是d
//	//原因是，编译器会创建一个临时变量，吧double整形的部分放在临时变量中
//	//让rd引用临时变量，而不是d，临时变量是编译器创建的
//	//我们不知道他的名字也不知道他的地址，所以我们是无法对他进行任何修改的
//	//既然改不成，那就说明这个空间本来就具有常性
//	//所以加上const就可以通过编译了
//	return 0;
//}


//void Swap(int& ra, int& rb)    //ra是a的别名，rb是b的别名
//{
//	int temp = ra;
//	ra = rb;
//	rb = temp;
//	//通过交换形参，也就相当于是交换实参了
//}
//int main()
//{
//	int a = 1;
//	int b = 2;
//	Swap(a, b);
//	cout << a << " " << b << " " << endl;
//	return 0;
//}
////不需要判空，也不需要解引用，使用起来十分的方便，效率比较高


//int& Add(int left, int right)  //按照引用的方式返回
//{
//	int ret = left + right;
//	return ret;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int& retVal = Add(a, b);
//	Add(100, 200);   //按理来说，这一步并没有返回值来接收
//	//但是通过监视来看，可以看书retVal的值最后还是变成300了
//	//原因在于retVal是ret的别名，一直是空间的别名，空间没有发生变化，所以
//	//相当于是自动变化。
//	return 0;
//}
////但是实际上，这一段代码是有问题的，ret除了函数的作用域只会，就会把空间归还给操作系统了，那么retValue还在引用ret，就相当于是在引用无效的空间


//#include <time.h>
//struct A
//{
//	int a[10000];
//};
//void TestFunc1(A a)
//{
//	//值传递
//}
//void TestFunc2(A& a)
//{
//	//引用传递
//}
//void TestFunc3(A* a)
//{
//	//址传递
//}
//void TestRefAndValue()
//{
//	A a;
//	// 以值作为函数参数
//	size_t begin1 = clock();
//	for (size_t i = 0; i < 10000; ++i)
//		TestFunc1(a);
//	size_t end1 = clock();
//
//	// 以引用作为函数参数
//	size_t begin2 = clock();
//	for (size_t i = 0; i < 10000; ++i)
//		TestFunc2(a);
//	size_t end2 = clock();
//
//	//以地址为参数
//	size_t begin3 = clock();
//	for (size_t i = 0; i < 10000; ++i)
//		TestFunc3(&a);
//	size_t end3 = clock();
//
//	// 分别计算两个函数运行结束后的时间
//	cout << "TestFunc1(int)-time:" << end1 - begin1 << endl;
//	cout << "TestFunc2(int&)-time:" << end2 - begin2 << endl;
//	cout << "TestFunc3(int*)-time:" << end3 - begin3 << endl;
//
//}
//
//// 运行多次，检测值和引用在传参方面的效率区别
//int main()
//{
//	for (int i = 0; i < 10; ++i)
//	{
//		TestRefAndValue();
//	}
//	return 0;
//}


//#include<iostream>
//using namespace std;
//int main()
//{
//	char c = 'c';
//	char& rc = c;
//	char* pc = &c;
//	cout << sizeof(rc) << endl;
//	cout << sizeof(pc) << endl;
//	return 0;
//}
////打印的结果为1和4


////C语言中有宏常量和宏函数
////在C++中有const可以使用
////在C++中，const所修饰的量就已经是一个常量了，那么怎么去验证是常量呢？就可以用数组
////#include<iostream>
////using namespace std;
////int main()
////{
////	const int a = 10;
////	int array[a] = { 0 };  //是完全可以通过编译的,因为a是常量
////	return 0;
////}
////同时const还具有宏常量的属性(在预处理阶段就已经替换掉了)，const类型的替换
////发生在编译阶段，const类型的常量可以参与编译，安全性是比较高的。


//int main()
//{
//	const int a = 10;
//	//int array[a];
//	int* pa = (int*)& a;
//
//	*pa = 100;
//	cout << a << endl;
//	cout << *pa << endl;
//	return 0;
//}